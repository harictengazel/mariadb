[server]

# this is only for the mysqld standalone daemon
[mysqld]

##################################################
# GENERAL
##################################################

server-id=23145

bind-address=0.0.0.0

character-set-server = utf8
collation-server = utf8_turkish_ci
init_connect = 'SET collation_connection = utf8_turkish_ci'
init_connect = 'SET NAMES utf8'

max_allowed_packet=128MB
max_connections=8000
max-connect-errors=1000000
skip-name-resolve
open-files-limit=65535
default_storage_engine=InnoDB

##################################################
# LOGS
##################################################

expire_logs_days=45
log_warnings=3
slow_query_log=1
slow_query_log_file=/var/lib/mysql/slow_query.log
long_query_time=2

##################################################
# ENGINE INDEPENDENT
##################################################

# Each session that needs to do a sort allocates a buffer of this size. 
# https://www.percona.com/blog/2010/10/25/impact-of-the-sort-buffer-size-in-mysql/
sort_buffer_size=4MB

# Minimum size in bytes of the buffer used for queries that cannot use an index, 
# and instead perform a full table scan. Increase to get faster full joins when adding 
# indexes is not possible, although be aware of memory issues, since joins will always 
# allocate the minimum size. Best left low globally and set high in sessions that 
# require large full joins. 
join_buffer_size=6MB

# If the number of opened tables is increasing rapidly, you should look at increasing the 
# table_open_cache value. Try to find a value that sees a slow, or possibly even no, 
# increase in the number of opened tables. Default value : 2000
# show global status like 'opened_tables';
table_open_cache=4000

# Enabling query cache
# The query cache also needs to be disabled for MariaDB Galera cluster versions prior to "5.5.40-galera", 
# "10.0.14-galera" and "10.1.2".
query-cache-type=1

# It is also undesirable to keep the query cache relatively high value at 256 MB as the Qcache invalidation
# becomes costly. For details, Peter Zaitsev wrote about this a few years ago in a post that’s still 
# relevant today titled, “Beware large Query_Cache sizes.”
# https://www.percona.com/blog/2015/01/02/the-mysql-query-cache-how-it-works-and-workload-impacts-both-good-and-bad/
# ATTENTION LIMITATIONS :
# The query cache needs to be disabled in order to use OQGRAPH.
# The query cache is not used by the Spider storage engine (amongst others).
# The query cache also needs to be disabled for MariaDB Galera cluster versions prior to "5.5.40-galera", "10.0.14-galera" and "10.1.2".
query-cache-size=256MB

# Number of threads server caches for re-use. If this limit hasn't been reached, when a client disconnects, 
# its threads are put into the cache, and re-used where possible. Normally this setting has little effect, 
# as the other aspects of the thread implementation are more important, but increasing it can help servers with 
# high volumes of connections per second so that most can use a cached, rather than a new, thread. The cache 
# miss rate can be calculated as the server status variables threads_created/connections. 
# If the thread pool is active, thread_cache_size is ignored. Normally 50 amount is fine. 
thread-cache-size=800


##################################################
# MyISAM ENGINE
##################################################

# The ratio of key_reads to key_read_requests should be as low as possible, 
# 1:100 is the highest acceptable, 1:1000 is better, and 1:10 is terrible.
# mysqladmin ext | grep Key_
key_buffer_size=4096MB

# Size in bytes of the buffer allocated when creating or sorting indexes on a 
# MyISAM table. Default Value: 128MB
myisam_sort_buffer_size = 256M

# Number of table definitions that can be cached. Table definitions are taken from the .frm files, 
# and if there are a large number of tables increasing the cache size can speed up table opening. 
# Unlike the table_open_cache, as the table_definition_cache doesn't use file descriptors, and is much smaller.
table-definition-cache=4096


# https://www.percona.com/blog/2007/09/17/mysql-what-read_buffer_size-value-is-optimal/
#read_buffer_size = 2M
#https://www.percona.com/blog/2007/07/24/what-exactly-is-read_rnd_buffer_size/
#read_rnd_buffer_size = 2M

##################################################
# MEMORY ENGINE
##################################################

# MySQL tmp_table_size is  the maximum size of internal in-memory temporary tables.
# (The actual limit is determined as the minimum of tmp_table_size and max_heap_table_size.) 
# If an in-memory temporary table exceeds the limit, MySQL automatically converts it to an on-disk MyISAM table.
tmp_table_size=16384M

# Maximum size in rows for user-created MEMORY tables. Setting the variable while the server is 
# active has no effect on existing tables unless they are recreated or altered. The smaller of 
# max_heap_table_size and tmp_table_size also limits internal in-memory tables.
max_heap_table_size=16384M

##################################################
# INNODB ENGINE
##################################################

# Size in bytes of the InnoDB memory pool used for storing information about internal data structures. 
# Defaults to 8MB, if your application has many tables and a large structure, and this is exceeded, 
# operating system memory will be allocated and warning messages written to the error log, in which case 
# you should increase this value.
# This one does not really affect performance too much, at least on OS with decent memory allocators. 
# Still you might want to have it 20MB (sometimes larger) so you can see how much memory Innodb allocates 
# for misc needs.
# DEPRECETED !
#innodb_additional_mem_pool_size=256M

# Default for this one is kind of OK for many workloads with medium write load and shorter transactions. 
# If you have update activity spikes however or work with blobs a lot you might want to increase it. 
# Do not set it too high however as it would be waste of memory – it is flushed every 1 sec anyway 
# so you do not need space for more than 1 sec worth of updates. 8MB-16MB are typically enough. 
# Smaller installations should use smaller values.
# Typically 4M is good for most cases unless you’re piping large blobs to Innodb in this case increase it a bit.
innodb_log_buffer_size=8M

# For certain workloads you might end up with values 1,2 or 4 being optimal even if you have 8 CPUs. 
# Note if this value is less than number of CPUs and you’re using mainly Innodb tables you might be
# unable to use all of your CPUs effectively as there are not enough number of running threads
innodb_thread_concurrency=32

# 1 The default, the log buffer is written to the log file and a flush to disk performed after each transaction.
# This is required for full ACID compliance.
# 0 Nothing is done on commit; rather the log buffer write and flush are performed once a second. This gives better performance,
# but a server crash can erase the last second of transactions.
# 2 The log buffer is written after each commit, but flushing takes place once a second. Performance is slightly better, 
# but a OS or power outage can cause the last second's transactions to be lost.
# 3 (from MariaDB 10.0) Emulates MariaDB 5.5 group commit (3 syncs per group commit). See Binlog group commit and 
innodb_flush_log_at_trx_commit=2

# https://www.percona.com/blog/2007/11/03/choosing-innodb_buffer_pool_size/
# Typically 70-80% of total memory 
innodb_buffer_pool_size=64G

# Avoid double buffering and reduce swap pressure, in most cases this setting improves performance.
# Though be careful if you do not have battery backed up RAID cache as when write IO may suffer.
# https://www.percona.com/blog/2013/01/03/is-there-a-room-for-more-mysql-io-optimization/
innodb_flush_method=O_DIRECT

# Very important for write intensive workloads especially for large data sets. 
# Larger sizes offer better performance but increase recovery times so be careful. 
# I normally use values 64M-512M depending on server size.
innodb_log_file_size=128M

# If set to 1, new XtraDB/InnoDB tables are created with data and indexes stored in their own .ibd file.
# If set to 0, the default, new tables are created in the system tablespace
innodb_file_per_table=1

# If innodb_buffer_pool_size is set to more than 1GB, innodb_buffer_pool_instances divides the InnoDB buffer pool
# into this many instances. Each instance manages its own data structures and takes an equal portion of the total buffer pool size,
# so for example if innodb_buffer_pool_size is 4GB and innodb_buffer_pool_instances is set to 4, each instance will be 1GB. 
# Each instance should ideally be at least 1GB in size.
innodb_buffer_pool_instances=32

##################################################
# GALERA CLUSTER 
##################################################

[galera]
wsrep_provider=/usr/lib64/galera/libgalera_smm.so
wsrep_cluster_address="gcomm://10.10.10.10,10.10.10.11,10.10.10.13"
wsrep_cluster_name="CLUSTER"

# Gcache Recipe
# show global status like 'wsrep_received_bytes'; 
# show global status like 'wsrep_replicated_bytes'; 
# select sleep(60);
# show global status like 'wsrep_received_bytes';
# show global status like 'wsrep_replicated_bytes';
# (second wsrep_received_bytes – first wsrep_received_bytes) + (second wsrep_replicated_bytes – first wsrep_replicated_bytes) * 60 = 
# Nb of bytes written in the gcache for 1 hour
wsrep_provider_options="gcache.size=1200M; gcache.page_size=2G"

binlog_format=row
wsrep_notify_cmd="/usr/local/bin/galeranotify.py"
wsrep_on=ON

# Locking mode used for generating auto-increment values. 0 is the traditional lock mode, 1 the consecutive,
# and 2 the interleaved. See AUTO_INCREMENT handling in XtraDB/InnoDB for more on the lock modes. 
# ATTENTION WITH GALERA: In order to use Galera, the mode needs to be set to 2.
innodb_autoinc_lock_mode=2

# This parameter allows you to define how many threads the node uses when applying slave write-sets. 
# Performance on the underlying system and hardware, the size of the database, the number of client connections, and the 
# load your application puts on the server all factor in the need for threading, but not in a way that makes the scale 
# of that need easy to predict. Because of this, there is no strict formula to determine how many slave threads your node actually needs.
wsrep_slave_threads=8


# this is only for embedded server
[embedded]

# This group is only read by MariaDB servers, not by MySQL.
# If you use the same .cnf file for MySQL and MariaDB,
# you can put MariaDB-only options here
[mariadb]

# This group is only read by MariaDB-10.0 servers.
# If you use the same .cnf file for MariaDB of different versions,
# use this group for options that older servers don't understand
[mariadb-10.0]

